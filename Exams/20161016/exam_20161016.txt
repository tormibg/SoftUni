---- 01
CREATE TABLE Flights
(FlightID             INT PRIMARY KEY,
 DepartureTime        DATETIME NOT NULL,
 ArrivalTime          DATETIME NOT NULL,
 [Status]             VARCHAR(9),
 OriginAirportID      INT,
 DestinationAirportID INT,
 AirlineID            INT,
 CONSTRAINT chk_Status CHECK([Status] IN('Departing', 'Delayed', 'Arrived', 'Cancelled')),
 CONSTRAINT FK_Flights_From_Airports FOREIGN KEY(OriginAirportID) REFERENCES Airports(AirportID),
 CONSTRAINT FK_Flights_To_Airports FOREIGN KEY(DestinationAirportID) REFERENCES Airports(AirportID),
 CONSTRAINT FK_Flights_Airlines FOREIGN KEY(AirlineID) REFERENCES Airlines(AirlineID)
);

CREATE TABLE Tickets
(TicketID   INT PRIMARY KEY,
 Price      DECIMAL(8, 2) NOT NULL,
 Class      VARCHAR(6),
 Seat       VARCHAR(5),
 CustomerID INT,
 FlightID   INT,
 CONSTRAINT chk_Class CHECK(Class IN('First', 'Second', 'Third')),
 CONSTRAINT FK_Tickets_Customers FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID),
 CONSTRAINT FK_Tickets_Flights FOREIGN KEY(FlightID) REFERENCES Flights(FlightID)
);

------- 02
INSERT INTO Flights
(FlightID,
 DepartureTime,
 ArrivalTime,
 Status,
 OriginAirportID,
 DestinationAirportID,
 AirlineID)
VALUES
(
  1, CONVERT( VARCHAR, '2016-10-13 06:00 AM', 100 ), CONVERT( VARCHAR, '2016-10-13 10:00 AM', 100 ), 'Delayed', '1', '4', '1'),
(
  2, CONVERT( VARCHAR, '2016-10-12 12:00 PM', 100 ), CONVERT( VARCHAR, '2016-10-12 12:01 PM', 100 ), 'Departing', '1', '3', '2'),
(
  3, CONVERT( VARCHAR, '2016-10-14 03:00 PM', 100 ), CONVERT( VARCHAR, '2016-10-20 04:00 AM', 100 ), 'Delayed', '4', '2', '4'),
(
  4, CONVERT( VARCHAR, '2016-10-12 01:24 PM', 100 ), CONVERT( VARCHAR, '2016-10-12 04:31 PM', 100 ), 'Departing', '3', '1', '3'),
(
  5, CONVERT( VARCHAR, '2016-10-12 08:11 AM', 100 ), CONVERT( VARCHAR, '2016-10-12 11:22 PM', 100 ), 'Departing', '4', '1', '1'),
(
  6, CONVERT( VARCHAR, '1995-06-21 12:30 PM', 100 ), CONVERT( VARCHAR, '1995-06-22 08:30 PM', 100 ), 'Arrived', '2', '3', '5'),
(
  7, CONVERT( VARCHAR, '2016-10-12 11:34 PM', 100 ), CONVERT( VARCHAR, '2016-10-13 03:00 AM', 100 ), 'Departing', '2', '4', '2'),
(
  8, CONVERT( VARCHAR, '2016-11-11 01:00 PM', 100 ), CONVERT( VARCHAR, '2016-11-12 10:00 PM', 100 ), 'Delayed', '4', '3', '1'),
(
  9, CONVERT( VARCHAR, '2015-10-01 12:00 PM', 100 ), CONVERT( VARCHAR, '2015-12-01 01:00 AM', 100 ), 'Arrived', '1', '2', '1'),
(
  10, CONVERT( VARCHAR, '2016-10-12 07:30 PM', 100 ), CONVERT( VARCHAR, '2016-10-13 12:30 PM', 100 ), 'Departing', '2', '1', '7');

INSERT INTO Tickets
(TicketID,
 Price,
 Class,
 Seat,
 CustomerID,
 FlightID)
VALUES
(
  1, '3000.00', 'First', '233-A', '3', '8'),
(
  2, '1799.90', 'Second', '123-D', '1', '1'),
(
  3, '1200.50', 'Second', '12-Z', '2', '5'),
(
  4, '410.68', 'Third', '45-Q', '2', '8'),
(
  5, '560.00', 'Third', '201-R', '4', '6'),
(
  6, '2100.00', 'Second', '13-T', '1', '9'),
(
  7, '5500.00', 'First', '98-O', '2', '7');

-------- 03
UPDATE [dbo].[Flights]
  SET [AirlineID] = 1
WHERE [status] = 'Arrived';

------ 04
UPDATE [dbo].[Tickets]
  SET price*=1.5
WHERE FlightID IN
(
	SELECT f.FlightID
	FROM [dbo].[Flights] AS f
	WHERE f.AirlineID IN
	(
		SELECT TOP 1 a.AirlineID
		FROM Airlines AS a
		ORDER BY rating DESC
	)
);

------- 05
INSERT INTO CustomerReviews( ReviewID, ReviewContent, ReviewGrade, AirlineID, CustomerID )
VALUES( 1, 'Me is very happy. Me likey this airline. Me good.', 10, 1, 1 ),
 ( 2, 'Ja, Ja, Ja... Ja, Gut, Gut, Ja Gut! Sehr Gut!', 10, 1, 4 ), 
 ( 3, 'Meh...', 5, 4, 3 ), 
 ( 4, 'Well Ive seen better, but Ive certainly seen a lot worse...', 7, 3, 5 );

INSERT INTO dbo.CustomerBankAccounts( AccountID, AccountNumber, Balance, CustomerID )
VALUES( 1, '123456790', 2569.23, 1 ), ( 2, '18ABC23672', 14004568.23, 2 ), ( 3, 'F0RG0100N3', 19345.20, 5 );


---------06
SELECT t.TicketID, t.Price, t.Class, t.Seat
FROM Tickets AS t
ORDER BY t.TicketID ASC;

---------07
SELECT c.CustomerID,
       c.FirstName+' '+c.LastName AS 'FullName',
       c.Gender
FROM Customers AS c
ORDER BY [FullName] ASC,
         c.CustomerID ASC;

---------08
SELECT f.FlightID,
       f.DepartureTime,
       f.ArrivalTime
FROM Flights AS f
WHERE f.Status = 'Delayed'
ORDER BY f.FlightID ASC;

---------09
SELECT DISTINCT top 5
	   a.AirlineID, a.AirlineName, a.Nationality, a.Rating
FROM Airlines AS a
	 JOIN
	 Flights AS f
	 ON f.AirlineID = a.AirlineID
ORDER BY a.Rating DESC, a.AirlineID ASC;

---------10
SELECT t.TicketID,
       ap.AirportName AS 'Destination',
       c.FirstName+' '+c.LastName AS CustomerName
FROM Tickets AS t
     JOIN Flights AS f ON t.FlightID = f.FlightID
     JOIN Airports AS ap ON ap.AirportID = f.DestinationAirportID
     JOIN Customers AS c ON c.CustomerID = t.CustomerID
WHERE t.Price < 5000
      AND t.Class = 'First'
ORDER BY t.TicketID;

----------11
SELECT c.CustomerID,
       c.FirstName+' '+c.LastName AS FullName,
       tw.TownName AS HomeTown
FROM Customers AS c
     JOIN Tickets AS t ON t.CustomerID = c.CustomerID
     JOIN Flights AS f ON f.FlightID = t.FlightID
                          AND f.[Status] = 'departing'
     JOIN Airports AS ap ON ap.AirportID = f.OriginAirportID
     JOIN Towns AS tw ON tw.TownID = ap.TownID
WHERE c.HomeTownID = tw.TownID
ORDER BY c.CustomerID ASC;

---------12
SELECT DISTINCT
       c.CustomerID,
       c.FirstName+' '+c.LastName AS FullName,
       DATEDIFF(year, c.DateOfBirth, '2016') AS 'Age'
FROM Customers AS c
     JOIN Tickets AS ti ON ti.CustomerID = c.CustomerID
     JOIN Flights AS f ON f.FlightID = ti.FlightID
                          AND f.[Status] = 'Departing'
ORDER BY [Age] ASC,
         c.CustomerID ASC;

---------13
SELECT TOP 3 c.CustomerID,
             c.FirstName+' '+c.LastName AS FullName,
             t.Price AS 'TicketPrice',
             a.AirportName
FROM Customers AS c
     JOIN Tickets AS t ON t.CustomerID = c.CustomerID
     JOIN Flights AS f ON f.FlightID = t.FlightID
                          AND f.[Status] = 'Delayed'
     JOIN Airports AS a ON a.AirportID = f.DestinationAirportID
ORDER BY [TicketPrice] DESC,
         c.CustomerID ASC;

--------14
SELECT TOP 5 f.FlightID,
             f.DepartureTime,
             f.ArrivalTime,
             ap1.AirportName as 'Origin',
             ap2.AirportName as 'Destination'
FROM Flights AS f
     JOIN Airports AS ap1 ON ap1.AirportID = f.OriginAirportID
     JOIN Airports AS ap2 ON ap2.AirportID = f.DestinationAirportID
WHERE f.[Status] = 'Departing'
ORDER BY f.DepartureTime ASC,
         f.FlightID ASC;

-------15
SELECT c.CustomerID,
       c.FirstName+' '+c.LastName AS FullName,
       DATEDIFF(year, c.DateOfBirth, '2016') AS 'Age'
FROM Customers AS c
     JOIN Tickets AS t ON t.CustomerID = c.CustomerID
     JOIN Flights AS f ON f.FlightID = t.FlightID
                          AND f.[Status] = 'Arrived'
WHERE DATEDIFF(year, c.DateOfBirth, '2016') < 21
ORDER BY [Age] DESC,
         c.CustomerID ASC;

-------16
SELECT ap.AirportID,
       ap.AirportName,
       CountPass.pas
FROM Airports AS ap
     JOIN Flights AS f ON f.OriginAirportID = ap.AirportID
                          AND f.[Status] = 'Departing'
     JOIN
(
    SELECT COUNT(1) AS 'pas',
           t.FlightID
    FROM Tickets AS t
    GROUP BY t.FlightID
) AS CountPass ON f.FlightID = CountPass.FlightID
WHERE CountPass.pas != 0
ORDER BY ap.AirportID ASC;

------------17
CREATE PROCEDURE usp_SubmitReview(
	   @CustomerID int, @ReviewContent varchar(255), @ReviewGrade smallint, @AirlineName varchar(30))
AS
BEGIN
	BEGIN TRANSACTION;
	DECLARE @AirlineID int;
	SELECT @AirlineID = Airlines.AirlineID
	FROM Airlines
	WHERE AirlineName = @AirlineName;
	IF @AirlineID IS NULL
	BEGIN
		ROLLBACK;
		RAISERROR('Airline does not exist.', 16, 1);
		RETURN;
	END;
	DECLARE @CustReviewID int;
	SELECT @CustReviewID = MAX(CustomerReviews.ReviewID)
	FROM CustomerReviews;
	SET @CustReviewID+=1;
	INSERT INTO CustomerReviews( ReviewID, ReviewContent, ReviewGrade, AirlineID, CustomerID )
	VALUES( @CustReviewID, @ReviewContent, @ReviewGrade, @AirlineID, @CustomerID );
	COMMIT;
END;

-------- 18
CREATE PROCEDURE usp_PurchaseTicket(
	   @CustomerID int, @FlightID int, @TicketPrice decimal(8, 2), @Class varchar(6), @Seat varchar(5))
AS
BEGIN
	BEGIN TRANSACTION;
	DECLARE @CurBalance decimal(13, 2);
	SELECT @CurBalance = cba.Balance
	FROM CustomerBankAccounts AS cba
	WHERE cba.AccountID = @CustomerID;

	IF @CurBalance < @TicketPrice
	BEGIN
		ROLLBACK;
		RAISERROR('Insufficient bank account balance for ticket purchase.', 16, 1);
		RETURN;
	END;

	UPDATE CustomerBankAccounts
	  SET Balance-=@TicketPrice;

	DECLARE @TicketID int;

	SELECT @TicketID = MAX(t.TicketID)
	FROM Tickets AS t;

	SET @TicketID+=1;

	INSERT INTO Tickets( TicketID, Price, Class, Seat, CustomerID, FlightID )
	VALUES( @TicketID, @TicketPrice, @Class, @Seat, @CustomerID, @FlightID );
	COMMIT;
END;

------- 19
CREATE TRIGGER tr_ArrivedFlights ON dbo.Flights
INSTEAD OF UPDATE
AS
     BEGIN
         BEGIN TRANSACTION;
         IF OBJECT_ID(N'dbo.ArrivedFlights', N'U') IS NULL
             BEGIN
                 CREATE TABLE ArrivedFlights
                 (FlightID    INT PRIMARY KEY,
                  ArrivalTime DATETIME NOT NULL,
                  Origin      VARCHAR(50) NOT NULL,
                  Destination VARCHAR(50) NOT NULL,
                  Passengers  INT NOT NULL
                 );
             END;
         INSERT INTO ArrivedFlights
         (FlightID,
          ArrivalTime,
          Origin,
          Destination,
          Passengers
         )
                SELECT i.FlightID,
                       i.ArrivalTime,
                       ap1.AirportName,
                       ap2.AirportName,
                       isnull(
                             (
                                 SELECT COUNT(1)
                                 FROM Tickets AS t
                                      JOIN inserted AS i ON i.FlightID = t.FlightID
                                                            AND i.[Status] = 'Arrived'
                                 GROUP BY i.FlightID
                             ), 0) AS Passengers
                FROM inserted AS i
                     JOIN Airports AS ap1 ON ap1.AirportID = i.OriginAirportID
                     JOIN Airports AS ap2 ON ap2.AirportID = i.DestinationAirportID
                WHERE i.[Status] = 'Arrived';
         UPDATE Flights
           SET
               [Status] = i.[status]
         FROM Flights AS f
              JOIN inserted AS i ON i.FlightID = f.FlightID;
         COMMIT;
     END;